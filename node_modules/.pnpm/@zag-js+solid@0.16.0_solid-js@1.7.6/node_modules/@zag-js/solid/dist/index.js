"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  mergeProps: () => mergeProps,
  normalizeProps: () => normalizeProps,
  propTraps: () => propTraps,
  useActor: () => useActor,
  useMachine: () => useMachine,
  useService: () => useService
});
module.exports = __toCommonJS(src_exports);

// src/merge-props.ts
var import_solid_js2 = require("solid-js");

// src/prop-trap.ts
var import_solid_js = require("solid-js");
function trueFn() {
  return true;
}
var propTraps = {
  get(_, property, receiver) {
    if (property === import_solid_js.$PROXY)
      return receiver;
    return _.get(property);
  },
  has(_, property) {
    return _.has(property);
  },
  set: trueFn,
  deleteProperty: trueFn,
  getOwnPropertyDescriptor(_, property) {
    return {
      configurable: true,
      enumerable: true,
      get() {
        return _.get(property);
      },
      set: trueFn,
      deleteProperty: trueFn
    };
  },
  ownKeys(_) {
    return _.keys();
  }
};

// src/merge-props.ts
var access = (v) => typeof v === "function" && !v.length ? v() : v;
function chain(fns) {
  return (...args) => {
    for (const fn of fns) {
      fn && fn(...args);
    }
  };
}
var cssRegex = /((?:--)?(?:\w+-?)+)\s*:\s*([^;]*)/g;
function stringStyleToObject(style) {
  const object = {};
  let match;
  while (match = cssRegex.exec(style)) {
    object[match[1]] = match[2];
  }
  return object;
}
function mergeStyle(a, b) {
  if (typeof a === "object" && typeof b === "object")
    return { ...a, ...b };
  if (typeof a === "string" && typeof b === "string")
    return `${a};${b}`;
  const objA = typeof a === "object" ? a : stringStyleToObject(a);
  const objB = typeof b === "object" ? b : stringStyleToObject(b);
  return { ...objA, ...objB };
}
var reduce = (sources, key, calc) => {
  let v = void 0;
  for (const props of sources) {
    const propV = access(props)[key];
    if (!v)
      v = propV;
    else if (propV)
      v = calc(v, propV);
  }
  return v;
};
function mergeProps(...sources) {
  if (sources.length === 1) {
    return sources[0];
  }
  const listeners = {};
  for (const props of sources) {
    const properties = access(props);
    for (const key in properties) {
      if (key[0] === "o" && key[1] === "n" && key[2]) {
        const value = properties[key];
        const name = key.toLowerCase();
        const callback = typeof value === "function" ? value : (
          // jsx event handlers can be tuples of [callback, arg]
          Array.isArray(value) ? value.length === 1 ? value[0] : value[0].bind(void 0, value[1]) : void 0
        );
        if (callback)
          listeners[name] ? listeners[name].push(callback) : listeners[name] = [callback];
        else
          delete listeners[name];
      }
    }
  }
  const merge = (0, import_solid_js2.mergeProps)(...sources);
  return new Proxy(
    {
      get(key) {
        if (typeof key !== "string") {
          return Reflect.get(merge, key);
        }
        if (key === "style") {
          return reduce(sources, "style", mergeStyle);
        }
        if (key === "ref") {
          const fns = [];
          for (const props of sources) {
            const fn = access(props)[key];
            if (typeof fn === "function") {
              fns.push(fn);
            }
          }
          return chain(fns);
        }
        if (key[0] === "o" && key[1] === "n" && key[2]) {
          const fns = listeners[key.toLowerCase()];
          return fns ? chain(fns) : Reflect.get(merge, key);
        }
        if (key === "class" || key === "className") {
          return reduce(sources, key, (a, b) => `${a} ${b}`);
        }
        if (key === "classList") {
          return reduce(sources, key, (a, b) => ({ ...a, ...b }));
        }
        return Reflect.get(merge, key);
      },
      has(key) {
        return Reflect.has(merge, key);
      },
      keys() {
        return Object.keys(merge);
      }
    },
    propTraps
  );
}

// src/normalize-props.ts
var import_types = require("@zag-js/types");

// ../../utilities/core/src/guard.ts
var isArray = (v) => Array.isArray(v);
var isObject = (v) => !(v == null || typeof v !== "object" || isArray(v));
var isNumber = (v) => typeof v === "number" && !Number.isNaN(v);
var isString = (v) => typeof v === "string";

// src/cssify.ts
var import_hyphenate_style_name = __toESM(require("hyphenate-style-name"));
var format = (v) => v.startsWith("--") ? v : (0, import_hyphenate_style_name.default)(v);
function cssify(style) {
  let css = {};
  for (const property in style) {
    const value = style[property];
    if (!isString(value) && !isNumber(value))
      continue;
    css[format(property)] = value;
  }
  return css;
}

// src/normalize-props.ts
var eventMap = {
  onFocus: "onFocusIn",
  onBlur: "onFocusOut",
  onDoubleClick: "onDblClick",
  onChange: "onInput",
  defaultChecked: "checked",
  defaultValue: "value",
  htmlFor: "for",
  className: "class"
};
function toSolidProp(prop) {
  return prop in eventMap ? eventMap[prop] : prop;
}
var normalizeProps = (0, import_types.createNormalizer)((props) => {
  const normalized = {};
  for (const key in props) {
    const value = props[key];
    if (key === "style" && isObject(value)) {
      normalized["style"] = cssify(value);
      continue;
    }
    if (key === "children") {
      if (isString(value)) {
        normalized["textContent"] = value;
      }
      continue;
    }
    normalized[toSolidProp(key)] = value;
  }
  return normalized;
});

// src/use-actor.ts
var import_solid_js3 = require("solid-js");
var import_store = require("solid-js/store");
function useActor(service) {
  const [state, setState] = (0, import_store.createStore)(service.getState());
  (0, import_solid_js3.onMount)(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState((0, import_store.reconcile)(nextState));
    });
    (0, import_solid_js3.onCleanup)(() => {
      unsubscribe();
    });
  });
  return [state, service.send];
}

// src/use-machine.ts
var import_solid_js4 = require("solid-js");
var import_store2 = require("solid-js/store");
function useService(machine, options) {
  const { actions, state: hydratedState, context } = options ?? {};
  const service = (() => {
    const _machine = typeof machine === "function" ? machine() : machine;
    const contextValue = typeof context === "function" ? context() : context;
    return contextValue ? _machine.withContext(contextValue) : _machine;
  })();
  (0, import_solid_js4.onMount)(() => {
    service.start(hydratedState);
    if (service.state.can("SETUP")) {
      service.send("SETUP");
    }
    (0, import_solid_js4.onCleanup)(() => {
      service.stop();
    });
  });
  (0, import_solid_js4.createEffect)(() => {
    const contextValue = typeof context === "function" ? context() : context;
    service.setContext(contextValue);
  });
  (0, import_solid_js4.createEffect)(() => {
    service.setOptions({ actions });
  });
  return service;
}
function useMachine(machine, options) {
  const service = useService(machine, options);
  const [state, setState] = (0, import_store2.createStore)(service.getState());
  (0, import_solid_js4.onMount)(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState((0, import_store2.reconcile)(nextState));
    });
    (0, import_solid_js4.onCleanup)(() => {
      unsubscribe();
    });
  });
  return [state, service.send, service];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mergeProps,
  normalizeProps,
  propTraps,
  useActor,
  useMachine,
  useService
});
//# sourceMappingURL=index.js.map