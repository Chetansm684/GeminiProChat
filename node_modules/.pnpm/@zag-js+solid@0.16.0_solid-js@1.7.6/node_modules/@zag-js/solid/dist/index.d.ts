import * as _zag_js_core from '@zag-js/core';
import { StateMachine, Machine, MachineSrc } from '@zag-js/core';
export { ContextFrom, EventFrom, StateFrom } from '@zag-js/core';
import { MergeProps, JSX, Accessor } from 'solid-js';
import * as _zag_js_types from '@zag-js/types';
import { Store } from 'solid-js/store';

/**
 * Credits to @solid-primitives/props for the original implementation
 * https://github.com/solidjs-community/solid-primitives/blob/acc8b7aff2fc95307461aac94642f7fd296390e4/packages/utils/LICENSE
 */

type MaybeAccessor<T> = T | (() => T);
type PropsInput = {
    class?: string;
    className?: string;
    classList?: Record<string, boolean | undefined>;
    style?: JSX.CSSProperties | string;
    ref?: Element | ((el: any) => void);
} & Record<string, any>;
declare function mergeProps<T extends MaybeAccessor<PropsInput>[]>(...sources: T): MergeProps<T>;

type PropTypes = JSX.IntrinsicElements & {
    element: JSX.HTMLAttributes<any>;
    style: JSX.CSSProperties;
};
declare const normalizeProps: _zag_js_types.NormalizeProps<PropTypes>;

declare const propTraps: ProxyHandler<{
    get: (k: string | number | symbol) => any;
    has: (k: string | number | symbol) => boolean;
    keys: () => string[];
}>;

declare function useActor<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject>(service: Machine<TContext, TState, TEvent>): readonly [StateMachine.State<TContext, TState, TEvent>, (evt: StateMachine.Event<TEvent>) => void];

type HookOptions<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject> = Omit<StateMachine.HookOptions<TContext, TState, TEvent>, "context"> & {
    context?: Store<Partial<TContext>> | Accessor<Partial<TContext>>;
};
declare function useService<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject>(machine: MachineSrc<TContext, TState, TEvent>, options?: HookOptions<TContext, TState, TEvent>): _zag_js_core.Machine<TContext, TState, TEvent>;
declare function useMachine<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject>(machine: MachineSrc<TContext, TState, TEvent>, options?: HookOptions<TContext, TState, TEvent>): readonly [StateMachine.State<TContext, TState, TEvent>, (evt: StateMachine.Event<TEvent>) => void, _zag_js_core.Machine<TContext, TState, TEvent>];

export { PropTypes, mergeProps, normalizeProps, propTraps, useActor, useMachine, useService };
