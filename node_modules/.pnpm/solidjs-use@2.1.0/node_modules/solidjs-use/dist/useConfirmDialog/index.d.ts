import * as solid_js from 'solid-js';
import { Signal } from 'solid-js';
import { EventHookOn } from '@solidjs-use/shared';

type UseConfirmDialogRevealResult<C, D> = {
    data?: C;
    isCanceled: false;
} | {
    data?: D;
    isCanceled: true;
};
interface UseConfirmDialogReturn<RevealData, ConfirmData, CancelData> {
    /**
     * Opens the dialog.
     * Create promise and return it. Triggers `onReveal` hook.
     */
    reveal: (data?: RevealData) => Promise<UseConfirmDialogRevealResult<ConfirmData, CancelData>>;
    /**
     * Confirms and closes the dialog. Triggers a callback inside `onConfirm` hook.
     * Resolves promise from `reveal()` with `data` and `isCanceled` Accessor with `false` value.
     * Can accept any data and to pass it to `onConfirm` hook.
     */
    confirm: (data?: ConfirmData) => void;
    /**
     * Cancels and closes the dialog. Triggers a callback inside `onCancel` hook.
     * Resolves promise from `reveal()` with `data` and `isCanceled` Accessor with `true` value.
     * Can accept any data and to pass it to `onCancel` hook.
     */
    cancel: (data?: CancelData) => void;
    /**
     * Event Hook to be triggered right before dialog creating.
     */
    onReveal: EventHookOn<RevealData>;
    /**
     * Event Hook to be called on `confirm()`.
     * Gets data object from `confirm` function.
     */
    onConfirm: EventHookOn<ConfirmData>;
    /**
     * Event Hook to be called on `cancel()`.
     * Gets data object from `cancel` function.
     */
    onCancel: EventHookOn<CancelData>;
}
/**
 * Hooks for creating confirm dialogs. Useful for modal windows, popups and logins.
 *
 * @see https://solidjs-use.github.io/solidjs-use/core/useConfirmDialog
 */
declare function useConfirmDialog<RevealData = any, ConfirmData = any, CancelData = any>([revealed, setRevealed]?: Signal<boolean>): {
    isRevealed: solid_js.Accessor<boolean>;
    reveal: (data?: RevealData) => Promise<UseConfirmDialogRevealResult<ConfirmData, CancelData>>;
    confirm: (data?: ConfirmData) => void;
    cancel: (data?: CancelData) => void;
    onReveal: EventHookOn<any>;
    onConfirm: EventHookOn<any>;
    onCancel: EventHookOn<any>;
};

export { UseConfirmDialogReturn, UseConfirmDialogRevealResult, useConfirmDialog };
