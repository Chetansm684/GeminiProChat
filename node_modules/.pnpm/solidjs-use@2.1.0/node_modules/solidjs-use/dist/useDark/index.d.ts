import * as _solidjs_use_shared_solid_to_vue from '@solidjs-use/shared/solid-to-vue';
import { UseColorModeOptions, BasicColorMode } from '../useColorMode/index.js';
import 'solid-js';
import '@solidjs-use/shared';
import '../useStorage/index.js';
import '../_configurable.js';
import '../ssr-handlers.js';

interface UseDarkOptions extends Omit<UseColorModeOptions, 'modes' | 'onChanged'> {
    /**
     * Value applying to the target element when isDark=true
     *
     * @default 'dark'
     */
    valueDark?: string;
    /**
     * Value applying to the target element when isDark=false
     *
     * @default ''
     */
    valueLight?: string;
    /**
     * A custom handler for handle the updates.
     * When specified, the default behavior will be overridden.
     *
     * @default undefined
     */
    onChanged?: (isDark: boolean, defaultHandler: (mode: BasicColorMode) => void, mode: BasicColorMode) => void;
}
/**
 * Reactive dark mode with auto data persistence.
 *
 * @see https://solidjs-use.github.io/solidjs-use/core/useDark
 */
declare function useDark(options?: UseDarkOptions): _solidjs_use_shared_solid_to_vue.WritableComputedReturn<boolean>;

export { UseDarkOptions, useDark };
