import * as solid_js from 'solid-js';
import { MaybeAccessor } from '@solidjs-use/shared';
import { ConfigurableNavigator } from '../_configurable.js';

interface UseUserMediaOptions extends ConfigurableNavigator {
    /**
     * If the stream is enabled
     * @default false
     */
    enabled?: MaybeAccessor<boolean>;
    /**
     * Recreate stream when deviceIds or constraints changed
     *
     * @default true
     */
    autoSwitch?: MaybeAccessor<boolean>;
    /**
     * MediaStreamConstraints to be applied to the requested MediaStream
     * If provided, the constraints will override videoDeviceId and audioDeviceId
     *
     * @default {}
     */
    constraints?: MaybeAccessor<MediaStreamConstraints>;
}
/**
 * Reactive `mediaDevices.getUserMedia` streaming
 *
 * @see https://solidjs-use.github.io/solidjs-use/core/useUserMedia
 */
declare function useUserMedia(options?: UseUserMediaOptions): {
    isSupported: solid_js.Accessor<boolean>;
    stream: solid_js.Accessor<MediaStream | undefined>;
    start: () => Promise<MediaStream | undefined>;
    stop: () => void;
    restart: () => Promise<MediaStream | undefined>;
    constraints: solid_js.Accessor<MediaStreamConstraints | undefined>;
    setConstraints: solid_js.Setter<MediaStreamConstraints | undefined>;
    enabled: solid_js.Accessor<MaybeAccessor<boolean>>;
    setEnabled: solid_js.Setter<MaybeAccessor<boolean>>;
    autoSwitch: solid_js.Accessor<MaybeAccessor<boolean>>;
    setAutoSwitch: solid_js.Setter<MaybeAccessor<boolean>>;
};
type UseUserMediaReturn = ReturnType<typeof useUserMedia>;

export { UseUserMediaOptions, UseUserMediaReturn, useUserMedia };
