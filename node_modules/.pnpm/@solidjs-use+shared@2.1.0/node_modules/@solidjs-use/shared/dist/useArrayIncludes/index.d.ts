import { Accessor } from 'solid-js';
import { MaybeAccessor } from '../utils/types.js';
import 'solid-js/types/reactive/signal';

type UseArrayIncludesComparatorFn<T, V> = (element: T, value: V, index: number, array: Array<MaybeAccessor<T>>) => boolean;
interface UseArrayIncludesOptions<T, V> {
    fromIndex?: number;
    comparator?: UseArrayIncludesComparatorFn<T, V> | keyof T;
}
declare function useArrayIncludes<T, V = any>(list: MaybeAccessor<Array<MaybeAccessor<T>>>, value: MaybeAccessor<V>, comparator?: UseArrayIncludesComparatorFn<T, V>): Accessor<boolean>;
declare function useArrayIncludes<T, V = any>(list: MaybeAccessor<Array<MaybeAccessor<T>>>, value: MaybeAccessor<V>, comparator?: keyof T): Accessor<boolean>;
declare function useArrayIncludes<T, V = any>(list: MaybeAccessor<Array<MaybeAccessor<T>>>, value: MaybeAccessor<V>, options?: UseArrayIncludesOptions<T, V>): Accessor<boolean>;

export { UseArrayIncludesComparatorFn, UseArrayIncludesOptions, useArrayIncludes };
