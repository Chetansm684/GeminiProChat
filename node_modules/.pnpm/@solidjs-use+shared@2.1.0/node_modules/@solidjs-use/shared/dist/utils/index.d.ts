export { ConfigurableEventFilter, DebounceFilterOptions, EventFilter, FunctionArgs, FunctionWrapperOptions, bypassFilter, createFilterWrapper, debounceFilter, pausableFilter, throttleFilter } from './filters.js';
export { assert, clamp, hasOwn, isClient, isDef, isIOS, isObject, noop, notNullish, now, rand, timestamp } from './is.js';
export { AnyFn, ArgumentsType, Arrayable, Awaitable, EffectOnDeps, ElementOf, Fn, MapOldSources, MapSources, MaybeAccessor, MaybeElement, MaybeElementAccessor, MaybeSignal, Mutable, Pausable, PromisifyFn, RemovableSignal, Stoppable } from './types.js';
export { nextTick } from '@solidjs-use/solid-to-vue';
import 'solid-js';
import 'solid-js/types/reactive/signal';

declare function promiseTimeout(ms: number, throwOnTimeout?: boolean, reason?: string): Promise<void>;
declare function identity<T>(arg: T): T;
interface SingletonPromiseReturn<T> {
    (): Promise<T>;
    /**
     * Reset current staled promise.
     * await it to have proper shutdown.
     */
    reset: () => Promise<void>;
}
/**
 * Create singleton promise function
 *
 * @example
 * ```
 * const promise = createSingletonPromise(async () => { ... })
 *
 * await promise()
 * await promise() // all of them will be bind to a single promise instance
 * await promise() // and be resolved together
 * ```
 */
declare function createSingletonPromise<T>(fn: () => Promise<T>): SingletonPromiseReturn<T>;
declare function invoke<T>(fn: () => T): T;
declare function containsProp(obj: object, ...props: string[]): boolean;
/**
 * Increase string a value with unit
 *
 * @example '2px' + 1 = '3px'
 * @example '15em' + (-2) = '13em'
 */
declare function increaseWithUnit(target: number, delta: number): number;
declare function increaseWithUnit(target: string, delta: number): string;
declare function increaseWithUnit(target: string | number, delta: number): string | number;
/**
 * Create a new subset object by giving keys
 *
 * @category Object
 */
declare function objectPick<O extends object, T extends keyof O>(obj: O, keys: T[], omitUndefined?: boolean): Pick<O, T>;
/**
 * Create a new subset object by omit giving keys
 */
declare function objectOmit<O extends object, T extends keyof O>(obj: O, keys: T[], omitUndefined?: boolean): Omit<O, T>;
declare function objectEntries<T extends object>(obj: T): [keyof T, T[keyof T]][];

export { SingletonPromiseReturn, containsProp, createSingletonPromise, identity, increaseWithUnit, invoke, objectEntries, objectOmit, objectPick, promiseTimeout };
