import {
  createStore,
  reconcile
} from "./chunk-AKZPSOHV.js";
import {
  $PROXY,
  createEffect,
  mergeProps,
  onCleanup,
  onMount
} from "./chunk-BKTCXOML.js";
import "./chunk-CF3WPAMV.js";

// node_modules/.pnpm/@zag-js+types@0.16.0/node_modules/@zag-js/types/dist/index.mjs
function createNormalizer(fn) {
  return new Proxy({}, {
    get() {
      return fn;
    }
  });
}

// node_modules/.pnpm/hyphenate-style-name@1.0.4/node_modules/hyphenate-style-name/index.js
var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};
function toHyphenLower(match) {
  return "-" + match.toLowerCase();
}
function hyphenateStyleName(name) {
  if (cache.hasOwnProperty(name)) {
    return cache[name];
  }
  var hName = name.replace(uppercasePattern, toHyphenLower);
  return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
}
var hyphenate_style_name_default = hyphenateStyleName;

// node_modules/.pnpm/@zag-js+solid@0.16.0_solid-js@1.7.6/node_modules/@zag-js/solid/dist/index.mjs
function trueFn() {
  return true;
}
var propTraps = {
  get(_, property, receiver) {
    if (property === $PROXY)
      return receiver;
    return _.get(property);
  },
  has(_, property) {
    return _.has(property);
  },
  set: trueFn,
  deleteProperty: trueFn,
  getOwnPropertyDescriptor(_, property) {
    return {
      configurable: true,
      enumerable: true,
      get() {
        return _.get(property);
      },
      set: trueFn,
      deleteProperty: trueFn
    };
  },
  ownKeys(_) {
    return _.keys();
  }
};
var access = (v) => typeof v === "function" && !v.length ? v() : v;
function chain(fns) {
  return (...args) => {
    for (const fn of fns) {
      fn && fn(...args);
    }
  };
}
var cssRegex = /((?:--)?(?:\w+-?)+)\s*:\s*([^;]*)/g;
function stringStyleToObject(style) {
  const object = {};
  let match;
  while (match = cssRegex.exec(style)) {
    object[match[1]] = match[2];
  }
  return object;
}
function mergeStyle(a, b) {
  if (typeof a === "object" && typeof b === "object")
    return { ...a, ...b };
  if (typeof a === "string" && typeof b === "string")
    return `${a};${b}`;
  const objA = typeof a === "object" ? a : stringStyleToObject(a);
  const objB = typeof b === "object" ? b : stringStyleToObject(b);
  return { ...objA, ...objB };
}
var reduce = (sources, key, calc) => {
  let v = void 0;
  for (const props of sources) {
    const propV = access(props)[key];
    if (!v)
      v = propV;
    else if (propV)
      v = calc(v, propV);
  }
  return v;
};
function mergeProps2(...sources) {
  if (sources.length === 1) {
    return sources[0];
  }
  const listeners = {};
  for (const props of sources) {
    const properties = access(props);
    for (const key in properties) {
      if (key[0] === "o" && key[1] === "n" && key[2]) {
        const value = properties[key];
        const name = key.toLowerCase();
        const callback = typeof value === "function" ? value : (
          // jsx event handlers can be tuples of [callback, arg]
          Array.isArray(value) ? value.length === 1 ? value[0] : value[0].bind(void 0, value[1]) : void 0
        );
        if (callback)
          listeners[name] ? listeners[name].push(callback) : listeners[name] = [callback];
        else
          delete listeners[name];
      }
    }
  }
  const merge = mergeProps(...sources);
  return new Proxy(
    {
      get(key) {
        if (typeof key !== "string") {
          return Reflect.get(merge, key);
        }
        if (key === "style") {
          return reduce(sources, "style", mergeStyle);
        }
        if (key === "ref") {
          const fns = [];
          for (const props of sources) {
            const fn = access(props)[key];
            if (typeof fn === "function") {
              fns.push(fn);
            }
          }
          return chain(fns);
        }
        if (key[0] === "o" && key[1] === "n" && key[2]) {
          const fns = listeners[key.toLowerCase()];
          return fns ? chain(fns) : Reflect.get(merge, key);
        }
        if (key === "class" || key === "className") {
          return reduce(sources, key, (a, b) => `${a} ${b}`);
        }
        if (key === "classList") {
          return reduce(sources, key, (a, b) => ({ ...a, ...b }));
        }
        return Reflect.get(merge, key);
      },
      has(key) {
        return Reflect.has(merge, key);
      },
      keys() {
        return Object.keys(merge);
      }
    },
    propTraps
  );
}
var isArray = (v) => Array.isArray(v);
var isObject = (v) => !(v == null || typeof v !== "object" || isArray(v));
var isNumber = (v) => typeof v === "number" && !Number.isNaN(v);
var isString = (v) => typeof v === "string";
var format = (v) => v.startsWith("--") ? v : hyphenate_style_name_default(v);
function cssify(style) {
  let css = {};
  for (const property in style) {
    const value = style[property];
    if (!isString(value) && !isNumber(value))
      continue;
    css[format(property)] = value;
  }
  return css;
}
var eventMap = {
  onFocus: "onFocusIn",
  onBlur: "onFocusOut",
  onDoubleClick: "onDblClick",
  onChange: "onInput",
  defaultChecked: "checked",
  defaultValue: "value",
  htmlFor: "for",
  className: "class"
};
function toSolidProp(prop) {
  return prop in eventMap ? eventMap[prop] : prop;
}
var normalizeProps = createNormalizer((props) => {
  const normalized = {};
  for (const key in props) {
    const value = props[key];
    if (key === "style" && isObject(value)) {
      normalized["style"] = cssify(value);
      continue;
    }
    if (key === "children") {
      if (isString(value)) {
        normalized["textContent"] = value;
      }
      continue;
    }
    normalized[toSolidProp(key)] = value;
  }
  return normalized;
});
function useActor(service) {
  const [state, setState] = createStore(service.getState());
  onMount(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState(reconcile(nextState));
    });
    onCleanup(() => {
      unsubscribe();
    });
  });
  return [state, service.send];
}
function useService(machine, options) {
  const { actions, state: hydratedState, context } = options ?? {};
  const service = (() => {
    const _machine = typeof machine === "function" ? machine() : machine;
    const contextValue = typeof context === "function" ? context() : context;
    return contextValue ? _machine.withContext(contextValue) : _machine;
  })();
  onMount(() => {
    service.start(hydratedState);
    if (service.state.can("SETUP")) {
      service.send("SETUP");
    }
    onCleanup(() => {
      service.stop();
    });
  });
  createEffect(() => {
    const contextValue = typeof context === "function" ? context() : context;
    service.setContext(contextValue);
  });
  createEffect(() => {
    service.setOptions({ actions });
  });
  return service;
}
function useMachine(machine, options) {
  const service = useService(machine, options);
  const [state, setState] = createStore(service.getState());
  onMount(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState(reconcile(nextState));
    });
    onCleanup(() => {
      unsubscribe();
    });
  });
  return [state, service.send, service];
}
export {
  mergeProps2 as mergeProps,
  normalizeProps,
  propTraps,
  useActor,
  useMachine,
  useService
};
//# sourceMappingURL=@zag-js_solid.js.map
